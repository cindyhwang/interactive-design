// The `_` object constructor
function afp_v1(_settings) {


    // About object is returned if there is no 'id' parameter
    if (typeof _settings == 'undefined') {
	// error
	 throw('You cannot use AFP Library without passing a settings object');
    } else {
	this.settings = _settings;
    }

    // initializing of the elements
    this.cached_domElements = [];

    this.preload_lists = [];

    // Server based settings ----------------
    this.uniqueCode = this.uniqid();			    // the unique code we need for all the pings
    this.baseURL = 'http://localhost/';			    // generated by the server

    this.serveURL = 'http://serve.adfootprints.com/';
    if (window.location.hostname == 'localhost') this.serveURL = '';
    if (window.location.hostname == 'www.picklings.com') this.serveURL = '';
    if (window.location.hostname == 'picklings.com') this.serveURL = '';
    if (window.location.hostname.substring(0,6) == '127.0.') this.serveURL = '';
    if (window.location.hostname.substring(0,8) == '192.168.') this.serveURL = '';
    if (window.location.hostname.substring(0,6) == '10.10.') this.serveURL = '';

    //alert (window.location.hostname + ' => this.serveURL = '+this.serveURL);
    this.clientDomain = window.location.hostname.replace('http://','').replace('https://','').replace('www','').split(/[/?#]/)[0];
    // ----------------------------


    // Seciton settings
    this.sectionLen = 3; // how much parts of the url to be taken for section
    this.currentSection = this.get_section();
    // ----------------------------

    this.storedVariables = [];

    this.heatmaps = [];
    this.heatmapsContainerRegistered = false; // global flag if the heatmaps container has mouseout event listener attached

    // Broadcast messages
    this.messagesListeners = [];

    // Atmosphere ------------------------
    this.atmosphere = {};

    // isMobile
    this.atmosphere.isMobile = 0;
    if (typeof window.orientation !== 'undefined') { this.atmosphere.isMobile = 1; } else { this.atmosphere.isMobile = (navigator.userAgent.toLowerCase().indexOf("mobile") > -1)?1:0; }

    this.atmosphere.browserInnerWidth = window.innerWidth || document.documentElement.clientWidth;
    this.atmosphere.browserInnerHeight = window.innerHeight || document.documentElement.clientHeight;
    this.atmosphere.screenWidth = screen.width;
    this.atmosphere.screenHeight  = screen.height;
    // End of Atmosphere -----------------

    // videoplayers
    this.videoplayers = [];
    this.videoplayer_badbrowser = 0;
    if(navigator.userAgent.indexOf("Trident")>-1){ this.videoplayer_badbrowser=1};
    if(navigator.userAgent.toLowerCase().indexOf('firefox') > -1){ this.videoplayer_badbrowser=1};
    if(navigator.userAgent.toLowerCase().indexOf('opr') > -1){ this.videoplayer_badbrowser=1};

    // Expandable Settings
    this.expandableSettings = {};

    // MRAID
    if (typeof this.settings.mraidCompatible == 'undefined') this.settings.mraidCompatible = false;
    if (typeof this.settings.mraidInitWaiting == 'undefined') this.settings.mraidInitWaiting = 3000;

    // ORIENTATION -------------------------------------
    if (typeof this.settings.captureOrientation == 'undefined') this.settings.captureOrientation = false;
    this.deviceOrientation = false;


    // COOKIES -------------------------------------------------
    this.useLocalStorage = false;
    this.useCookies = false;
    this.cookieObject = {};
    // Use local storage instead of cookie on Safari
    if (typeof navigator !== "undefined" && typeof navigator.vendor !== "undefined" && navigator.vendor.indexOf("Apple") >= 0 && typeof localStorage !== "undefined") {
	    this.useLocalStorage = true;
    } else if (navigator.cookieEnabled) {
	    this.useCookies = true;
    }
    this.getObjectFromCookie();//initially load the cookie object
    // --- END OF COOKIES -------------------------------------



    // INITIALIZATION FUNCTION
    this.init();

};

// our dot-operator methods ----------------------------------------------------------
afp_v1.prototype = {
   // -- Private Methods ---------------

   log: function(_message) {

	if (typeof console == 'object') {
	console.log('AFP >> '+_message);
	}

   },

    uniqid: function (pr, en) {
	var pr = pr || '', en = en || false, result, us;

	this.seed = function (s, w) {
	    s = parseInt(s, 10).toString(16);
	    return w < s.length ? s.slice(s.length - w) :
		      (w > s.length) ? new Array(1 + (w - s.length)).join('0') + s : s;
	};

	result = pr + this.seed(parseInt(new Date().getTime() / 1000, 10), 8)
		    + this.seed(Math.floor(Math.random() * 0x75bcd15) + 1, 5);

	if (en) result += (Math.random() * 10).toFixed(8).toString();

	return result;
    },


   queue: (function(){

	"use strict";

	/* Array that contains the URLs to be loaded */
	var _queue = [];

	/* Specifies whether to continue on error */
	var _canContinueOnError = true;

	/* Specifies whether we are loading an URL at the moment */
	var _running = false;

	function _process() {
	    if (_queue.length === 0) return;

	    var _url = _queue.shift();

	    var img = new Image();
	    _running = true;
	    img.src = _url;

	    img.onload = function () {
		_running = false;
		_process();
	    };

	    img.onerror = function ( e ) {
		_running = false;
		if (_canContinueOnError) {
		    _process();
		}
	    };

	}

	return {
	    add: function (url) {
		_queue.push(url);
		if (!_running) {
		    _process();
		}
	    }
	}
    })(),


   // ---- preloading -----------------
   add_preload: function(_listName, _listArray) {
       if (typeof _listName === 'undefined' || typeof _listArray === 'undefined' ) {
	    console.error('add_preload() function parameters should be defined.');
	    return false;
	}

	this.preload_lists.push({name: _listName, urls: _listArray});

   },
   preload: function(_listName, _callback) {

       this.log('preload('+_listName+')');

       if (typeof _listName === 'undefined' || typeof _callback === 'undefined' ) {
	    console.error('preload() function parameters should be defined.');
	    return false;
	}
	var preload = [];
	for (var r=0, max=this.preload_lists.length;r<max;r++) {
	    if (this.preload_lists[r].name==_listName) {
		preload = this.preload_lists[r].urls;
	    }
	}
	if (preload === []) {
	    console.error('no preload list was found');
	    return false;
	}

	var loaded = 0;
	var len = preload.length;

	for (var i = 0; i < len; i++) {
	    var img = new Image();
	    img.onload = function () {
		if(++loaded == len) {
		    _callback && _callback();
		}
	    };
	    img.onerror = function () {
		console.error('Unable to load image.');
	    }
	    this.log('loading> '+preload[i]);
	    img.src = preload[i];
	}


   },
   // ---------------------------------

   // -- End of Private Methods --------

   el: function(_id) {
     return document.getElementById(this.generateId(_id));
   },

   cached_el: function(_id) {
     for (var i=0, max=this.cached_domElements.length; i < max; i++) {
	 if (this.generateId(_id) == this.cached_domElements[i].id) {
	    return this.cached_domElements[i];
	 }
     }
   },

    get_section: function() {
        /* Get section from location */
        var section;

        var href = '';
        if (window.frameElement) {
            var parentIFrame = window.frameElement;

            if (parentIFrame) {
                var _window = null;

                while (parentIFrame) {
                    _window = parentIFrame.ownerDocument.defaultView || parentIFrame.ownerDocument.parentWindow;
                    parentIFrame = _window.frameElement;
                }

                href = _window.location.href;
            }
        } else {
            href = window.location.href;
        }

        /* Get host and path */
        var hrefParser = document.createElement('a');
        hrefParser.href = href;
        if (/(^\/)/.test(hrefParser.pathname)) {
            section = hrefParser.hostname + hrefParser.pathname;
        } else {
            section = hrefParser.hostname + '/' + hrefParser.pathname;
        }
        section = section.split('/', this.sectionLen + 1);
        section = section.join('/');
        section = encodeURIComponent(section);

        return section;
    },



   // --- Event Handlers ---------------------------------------
   on: function(_elementDomId, _event, _callback) {

	if (document.addEventListener) {
	   this.el(_elementDomId).addEventListener(_event, _callback, false);
	} else if (document.attachEvent)  {
	   this.el(_elementDomId).attachEvent("on" + _event, _callback);
	}

   },

   click: function(_elementDomId, _callback){
      this.on(_elementDomId, 'click', _callback);
   },
   mouseOver: function(_elementDomId, _callback){
      this.on(_elementDomId, 'mouseover', _callback);
   },

   // --- Parse Functionality ----------------------

   generateId: function (_id) {
	    if (typeof _id === 'undefined') {
		console.error('generateId() function parameter should be defined.');
		return false;
	    }
	    var generatedId = this.settings.domPrefix + _id;
	    return generatedId;
   },

   cacheAllElements: function(_prefix) {

       this.log('cacheAllElements('+_prefix+')');

	if (typeof _prefix === 'undefined') {
	     this.log('cacheAllElements() function parameter should be defined. Otherwise the default prefix will be used');
	     _prefix = this.settings.domPrefix; // get the settings domPrefix if not passed
	}

	var all = document.getElementsByTagName("*");
	for (var i=0, max=all.length; i < max; i++) {
	    if (all[i].id!='') {
		 // Do something with the element here
		 if (all[i].id.substr(0,_prefix.length)==_prefix) {
		 this.cached_domElements.push(all[i]);
		 }
	    }
	}

   },
   // --- End of Parse Functionality ---------------

   // --- Functions --------------------------
   animateCss: function(sEleId, sCssProp, iTarget, uTotalTime) {

	units = 'px'; // only supports integer pixel values for now
	var me = this;
	var ele = this.el(sEleId);
	var startValue = parseInt(this.xGetComputedStyle(ele, sCssProp)) || 0;
	var disp = iTarget - startValue; // total displacement
	var freq = Math.PI / (2 * uTotalTime); // frequency
	var startTime = new Date().getTime();
	var tmr = setInterval(
	    function() {
	    var elapsedTime = new Date().getTime() - startTime;
	    if (elapsedTime < uTotalTime) {
		var f = Math.abs(Math.sin(elapsedTime * freq));
		ele.style[me.xCamelize(sCssProp)] = Math.round(f * disp + startValue) + units;
	    }
	    else {
		clearInterval(tmr);
		ele.style[me.xCamelize(sCssProp)] = iTarget + units;
	    }
	    }, 10
	);

    },

    // Help functions for pickleAds_AnimateCSS function ----------------------------------
    xGetComputedStyle: function (e, p, i){if(!(e=this.el(e))) return null;var s, v = 'undefined', dv = document.defaultView;if(dv && dv.getComputedStyle){s = dv.getComputedStyle(e,'');if (s) v = s.getPropertyValue(p);}else if(e.currentStyle) {v = e.currentStyle[this.xCamelize(p)];}else return null;return i ? (parseInt(v) || 0) : v;},
    xCamelize: function(d) {var e,g,b,f;b=d.split("-");f=b[0];for(e=1;e<b.length;++e){g=b[e].charAt(0);f+=b[e].replace(g,g.toUpperCase())}return f},
   // --- End of Functions -------------------

   findIndex: function(array, string) {
	var i = 0;
	for(i = 0; i < array.length; i++) {
	    if(array[i] == string) break;
	}
	return array[i] == string ? i : -1;
    },

   // --- Flash Functions --------------------------
   flash: {
	openPanel: function(_panel_name) {
	    this.log('flash.openPanel > '+_panel_name);
	},
	closePanel: function(_panel_name) {
	    this.log('flash.closePanel > '+_panel_name);
	}
   },
   // --- End of Flash Functions -------------------


   // --- System Object ----------------------------
    track: function(_keyword, _comment) {
        if (this.clientDomain != '.adfootprints.com') {
            if (this.serveURL!='' && _comment != '') {
                var trackURL = this.serveURL + 'activity/track/' + this.settings.creativeId + '/' + _keyword + '/' + _comment + '/' + this.uniqueCode + '/' + Math.floor(Math.random()*10000);
                if (this.currentSection!='') { trackURL += '?section=' + this.currentSection;}
                this.queue.add(trackURL);
            }
        } else {
            // Demo
            pickleAds_track( _keyword, _comment );
        }
	this.log('TRACK > '+_keyword+', '+_comment);
    },

    clickthru: function(_keyword) {
        if (this.clientDomain != '.adfootprints.com') {
            if (this.serveURL!=''&& _keyword != '') {
                var clickThruURL = this.serveURL + 'activity/clickthru/' + this.settings.creativeId + '/' + _keyword + '/' + this.uniqueCode + '/' + Math.floor(Math.random() * 10000);
                if (this.currentSection!='') { clickThruURL += '?section=' + this.currentSection; }
                if (this.settings.mraidCompatible == true) {
                   this.mraid_open(clickThruURL);
                } else {
                    window.open(clickThruURL, '_blank');
                }
                
            }
        } else {
            // Demo
            pickleAds_clickthru( _keyword );
        }
	this.log('CLICKTHRU > '+_keyword);
    },
   // --- end of System Object --------------------








   // --- Video Tracking --------------------------
   videoStart: function( _comment ) {
        // tracking of the event
        this.track('VIDEO_START', _comment );
   },
   videoEnd: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_END', _comment );
   },
   videoStop: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_STOP', _comment );
   },
   videoPause: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_PAUSE', _comment );
   },
   videoPlay: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_PLAY', _comment );
   },
   videoAudioUnmute: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_AUDIO_UNMUTE', _comment );
   },
   videoAudioMute: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_AUDIO_MUTE', _comment );
   },
   videoPercentage25: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_PERCENTAGE_25', _comment );
   },
   videoPercentage50: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_PERCENTAGE_50', _comment );
   },
   videoPercentage75: function( _comment ) {
	// tracking of the event
	this.track('VIDEO_PERCENTAGE_75', _comment );
   },
   // --- end of Video Tracking -------------------





   // --- Stored Variables ------------------------
    storeVariable: function(_variableName, _variableValue) {
	var existingFlag = -1;
	for(var r=0; r<this.storedVariables.length;r++){
		if (this.storedVariables[r].name == _variableName) {existingFlag = r;}
	}
	// update or add the variable ------------------------------------------
	if (existingFlag>-1) {
		this.storedVariables[existingFlag].value = _variableValue;
	} else {
		this.storedVariables.push({name:_variableName, value:_variableValue});
	}

    },

    getVariable: function(_variableName) {

	var variableValue = undefined;

	for(var r=0; r<this.storedVariables.length;r++){
	    if (this.storedVariables[r].name == _variableName) {variableValue = this.storedVariables[r].value; break;}
	}

	return variableValue;
    },

   // --- end of Stored Variables -----------------



   // --- Cookies ------------------------

   createCookie: function(name, value, days) {
	    // getting the domain only name
	    var domain = window.location.hostname.replace('http://','').replace('https://','').split(/[/?#]/)[0];
	    var domainParts = domain.split('.');
	    var mainDomain = domain;
	    if (domainParts.length==1) {mainDomain = domainParts[0];}
	    if (domainParts.length==2) {mainDomain = '.'+domainParts[0]+'.'+domainParts[1];}
	    if (domainParts.length>2) {var tld = domainParts.pop(); var domainbody = domainParts.pop(); mainDomain = '.'+domainbody+'.'+tld; }
	    if (days) { var date = new Date(); date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000)); var expires = "; expires=" + date.toGMTString(); } else {var expires = "";}
	    document.cookie = name + "=" + value + expires + "; domain="+mainDomain+"; path=/";
    },

    readCookie: function(name) { var nameEQ = name + "="; var ca = document.cookie.split(';'); for(var i=0; i < ca.length; i++) { var c = ca[i]; while (c.charAt(0) == ' ') {c = c.substring(1, c.length);} if (c.indexOf(nameEQ) == 0) {return c.substring(nameEQ.length, c.length);} } return null; },

    eraseCookie:function(name) { this.createCookie(name, "", -1); },

    getObjectFromCookie: function(){

	var Structure = [];
	var all_cookies = null;

	// breaking the structure
	if (this.useLocalStorage) {
		all_cookies = localStorage.getItem('afp_storedCookies');
	} else if (this.useCookies) {
		all_cookies = this.readCookie('afp_storedCookies');
	} else {
		all_cookies = null;
	}


	if (all_cookies != null && all_cookies!='') {
	    all_cookies = all_cookies.toString();
	    var cookies = all_cookies.split('|');


	    for (var curC=0;curC<cookies.length;curC++) {
		var curCookieParts =  cookies[curC].split('^');
		var curCookieCreativeID = curCookieParts[0].toString();
		var curCookieVariables = curCookieParts[1].toString();

		var curCookieObject={creative_id:curCookieCreativeID, variables:[]};

		if (curCookieVariables.indexOf('`')!=-1) {
		    var all_variables=curCookieVariables.split('`');
		} else {
		    var all_variables=[curCookieVariables.toString()];
		}


		for (var cv=0;cv<all_variables.length;cv++) {
		    var curVariableArray=all_variables[cv].split('~');
		    curCookieObject.variables.push({name:curVariableArray[0], value:curVariableArray[1]});
		}

		Structure.push(curCookieObject);

	    }
	}

	//console.log('getObjectFromCookie-----');
	//console.info(Structure);

	this.cookieObject = Structure;

    },

    saveObjectToCookie: function(){

	//console.log('saveObjectToCookie');
	//console.info(this.cookieObject);
	//console.log('---------------------------');

	var cookieArray = [];

	for (var curCreativeInfo in this.cookieObject) {

	    if(typeof this.cookieObject[curCreativeInfo].creative_id!='undefined') {

		//console.log('creativeid='+this.cookieObject[curCreativeInfo].creative_id);
		//console.info(this.cookieObject[curCreativeInfo].variables);

		var curCreativeVariablesArray=[];
		for (var v=0; v<this.cookieObject[curCreativeInfo].variables.length;v++) {

		    curCreativeVariablesArray.push(this.cookieObject[curCreativeInfo].variables[v].name+'~'+this.cookieObject[curCreativeInfo].variables[v].value);
		}

		var curCreativeString = this.cookieObject[curCreativeInfo].creative_id+'^'+curCreativeVariablesArray.join('`');

		cookieArray.push(curCreativeString);

	    }

	}

	var cookieString=cookieArray.join('|');


	if (this.useLocalStorage) {
		localStorage.setItem('afp_storedCookies', cookieString);
	} else if (this.useCookies) {
		this.createCookie('afp_storedCookies', cookieString, 365);
	}

    },


    storeCookieVar: function(_variableName, _variableValue) {

	if (this.cookieObject.length>0){ //existing cookieObject

	    var createdFlag=false;
	    for (var curCreativeInfo in this.cookieObject) {

		var existingFlag=-1;
		for (var curCreativeVariables in this.cookieObject[curCreativeInfo].variables) {

		    if (this.cookieObject[curCreativeInfo].variables[curCreativeVariables].name==_variableName) {
		       //existing
		       existingFlag=curCreativeVariables;
		    }

		}

		// ---Changing or adding
		if (this.cookieObject[curCreativeInfo].creative_id==this.settings.creativeId){
		    if (existingFlag!=-1) {
			//existing
			this.cookieObject[curCreativeInfo].variables[existingFlag].value=_variableValue;
		     } else {
			 //newone
			 this.cookieObject[curCreativeInfo].variables.push({name:_variableName,value:_variableValue});
		     }
		     createdFlag=true;
		}

	    }


	    // no crteativeId existing inthe cookieObject
	    if(createdFlag==false){
		// create a brand new one
		this.cookieObject.push({creative_id:this.settings.creativeId, variables:[{name:_variableName,value:_variableValue}]});
	    }


	} else {

	    // create a brand new one
	    this.cookieObject.push({creative_id:this.settings.creativeId, variables:[{name:_variableName,value:_variableValue}]});

	}

	this.saveObjectToCookie();

    },

    getCookieVar: function(_variableName) {

	var result;
        for (var curCreativeInfo in this.cookieObject) {
	    if (this.cookieObject[curCreativeInfo].creative_id==this.settings.creativeId){

		for (var curCreativeVariables in this.cookieObject[curCreativeInfo].variables) {

		    if (this.cookieObject[curCreativeInfo].variables[curCreativeVariables].name==_variableName) {
		       //existing
		       result=this.cookieObject[curCreativeInfo].variables[curCreativeVariables].value;
		    }

		}

	    }

	}

	return result;

    },


   // --- end of Cookies -----------------




   // --- Heatmaps --------------------------------
   addHeatmap: function(_heatmapContainer, _domID, _heatmapName) {

       var library = this;

       this.heatmaps.push({name:_heatmapName, acmtime:0, timerStart:0}); // creating the heatmaps record

       this.el(_domID).heatmapIndex = this.heatmaps.length-1;

       this.on(_domID, 'mouseover',function() {
	   library.startHeatmapTimer(library.el(_domID).heatmapIndex);
       });
       this.on(_domID, 'mouseout',function() {
	   library.stopHeatmapTimer(library.el(_domID).heatmapIndex);
       });

       if (this.heatmapsContainerRegistered == false) {

		this.on(_heatmapContainer, 'mouseout', function(event) {

		    //this is the original element the event handler was assigned to
		    var e = event.toElement || event.relatedTarget;

		     //check for all children levels (checking from bottom up)
		     while(e && e.parentNode && e.parentNode != window) {
			 if (e.parentNode == this||  e == this) {
			     if(e.preventDefault) e.preventDefault();
			     return false;
			 }
			 e = e.parentNode;
		     }

		    library.saveHeatmaps(); // save the heatmaps

		});

		this.heatmapsContainerRegistered=true; // change the registered flag - already has a mouseout event listener
       }

   },

   startHeatmapTimer: function(_heatmapIndex) {
	var now = new Date();
	this.heatmaps[_heatmapIndex].timerStart = now.getTime();
   },
   stopHeatmapTimer: function(_heatmapIndex) {
	var now = new Date();
	var stopTime = now.getTime();
	var difference = stopTime-this.heatmaps[_heatmapIndex].timerStart;
	var accumulated = this.heatmaps[_heatmapIndex].acmtime + difference;
	this.heatmaps[_heatmapIndex].acmtime = accumulated;
   },
   saveHeatmaps: function() {

       	var heatmaps_info = [];

		for (var i = 0; i < this.heatmaps.length; i++) {
			var seconds = parseFloat(this.heatmaps[i].acmtime / 1000);
			if ((parseInt(seconds)>2) && (parseInt(seconds)<10000)) {heatmaps_info.push(this.heatmaps[i].name+'%7C'+seconds);}
			this.heatmaps[i].acmtime = 0;
		}

	if (heatmaps_info.length>0) {
		this.queue.add(this.serveURL + 'activity/heatmaps/' + this.settings.creativeId + '/' + heatmaps_info.join('%5E') + '/' + this.uniqueCode + '/' + Math.floor(Math.random()*10000));
	}

   },
   // --- end of Heatmaps -------------------------



   // --- Braodcast Messages ----------------------
   registerBroadcastListener: function(func) {
        if ((this.messagesListeners.indexOf && this.messagesListeners.indexOf(func)) === -1 || this.findIndex(this.messagesListeners, func) === -1) {
            this.messagesListeners.push(func);
        }
    },

   broadcastMessage: function(broadcaster, msg) {
        for (var i = 0, l = this.messagesListeners.length; i < l; i++) {
            this.messagesListeners[i] && this.messagesListeners[i](broadcaster, msg);
        }
    },
   // --- end of Broadcast Messages ---------------



   // --- Videoplayers -----------------------------
   registerVideoPlayer: function(_settings) {

       // check for settings
       if (typeof _settings.name != 'string') {throw('name parameter is required');}
       if (typeof _settings.domId != 'string') {throw('domId parameter is required');}
       if (typeof _settings.tracking != 'boolean') {throw('tracking parameter is required');}

       var existingVideoPlayer = this.findVideoplayer(_settings.name);

       if (typeof existingVideoPlayer == 'undefined') {

			// adding the video player objects
			var newVideoPlayer = {
				name: _settings.name,
				dom_id: _settings.domId,
				tracking: _settings.tracking,
				percentage: 0,
				dwell: 0,
				dwell_timer: null,
				obj: {},
				filename: '',
				playng_flag: false,
				videostart_tracked: false
			};


			// callbacks ----------------------------------------------
			if (typeof _settings.loadstartCallback == 'function') {
				newVideoPlayer.loadstartCallback = _settings.loadstartCallback;
			}
			if (typeof _settings.timeupdateCallback == 'function') {
				newVideoPlayer.timeupdateCallback = _settings.timeupdateCallback;
			}
			if (typeof _settings.pauseCallback == 'function') {
				newVideoPlayer.pauseCallback = _settings.pauseCallback;
			}
			if (typeof _settings.playCallback == 'function') {
				newVideoPlayer.playCallback = _settings.playCallback;
			}
			if (typeof _settings.endedCallback == 'function') {
				newVideoPlayer.endedCallback = _settings.endedCallback;
			}
			if (typeof _settings.errorCallback == 'function') {
				newVideoPlayer.errorCallback = _settings.errorCallback;
			}
			// -----------------------------------------------------------




			if(this.videoplayer_badbrowser!=0){ //if its ie or some browser who wont play mp4 it loads flash
			     videojs.options.techOrder = ["flash"];
			     videojs.options.flash.swf = this.settings.assetsURL+"video-js.swf";
			}

			var library = this;



			// -- Video1 -----------------------
			// Initialization ---------------------------
			var curVideoPlayer = videojs(this.generateId(newVideoPlayer.dom_id), {}, function(){
			    /*This section allow us to follow the percentage of the videos show, and also callback functions depending the status of the
			     * video, replace pickleads_expanded_video_videoname with the nam eyou want to use
			     */


			    this.on("loadstart", function(){
				    var curVideoPathElements = this.currentSrc().split('/');
				    var videoFilename = curVideoPathElements[curVideoPathElements.length-1];
				    newVideoPlayer.filename = videoFilename.substr(0,videoFilename.length-4);
				    newVideoPlayer.percentage = 0;
				    newVideoPlayer.playing_flag = true;
				    newVideoPlayer.dwell = 0;

				    // --- callback ----------------------------------
				    if (typeof newVideoPlayer.loadstartCallback == 'function') { newVideoPlayer.loadstartCallback && newVideoPlayer.loadstartCallback(); }
			    });

			    // ---------------------------------------------------------------------------------------------
			    this.on("timeupdate", function(){
			    	if (newVideoPlayer.playing_flag == true) {
					var percentage = Math.floor((this.currentTime() / this.duration())*100);
					if ((newVideoPlayer.percentage==0) && (percentage>=25)) {newVideoPlayer.percentage = 25;}
					if ((newVideoPlayer.percentage==25) && (percentage>=50)) {newVideoPlayer.percentage = 50;}
					if ((newVideoPlayer.percentage==50) && (percentage>=75)) {newVideoPlayer.percentage = 75;}
				    }

				    // --- callback ----------------------------------
				    if (typeof newVideoPlayer.timeupdateCallback == 'function') { newVideoPlayer.timeupdateCallback && newVideoPlayer.timeupdateCallback(); }
			    });
			    // ---------------------------------------------------------------------------------------------
			    this.on("pause", function(){
                                        newVideoPlayer.playing_flag = false;
                                            // stop dwell timer
                                        clearInterval(newVideoPlayer.dwell_timer);

					// --- callback ----------------------------------
					if (typeof newVideoPlayer.pauseCallback == 'function') { newVideoPlayer.pauseCallback && newVideoPlayer.pauseCallback(); }
			    });
			    // ---------------------------------------------------------------------------------------------
			    this.on("play", function(){
                                        //this.volume(100);
					newVideoPlayer.playing_flag = true;

					// Continue Dwell time
					clearInterval(newVideoPlayer.dwell_timer);
					newVideoPlayer.dwell_timer = setInterval(function() {newVideoPlayer.dwell++;},1000);

					if (newVideoPlayer.videostart_tracked == false) {
					    if (newVideoPlayer.tracking == true) { library.videoStart(newVideoPlayer.filename);}
					    newVideoPlayer.videostart_tracked = true;
					}
					// --- callback ----------------------------------
					if (typeof newVideoPlayer.playCallback == 'function') { newVideoPlayer.playCallback && newVideoPlayer.playCallback(); }
			    });
			    // ---------------------------------------------------------------------------------------------
			    this.on("ended", function(){

				    // tracking
				    if (newVideoPlayer.tracking == true) {library.videoEnd(newVideoPlayer.filename);}

				    newVideoPlayer.videostart_tracked = false;
				    newVideoPlayer.playing_flag = false;
				    newVideoPlayer.percentage = 0;

				    // Track Dwell Time ------------------------------------------------------
				    var lengthOfVideo = parseInt(newVideoPlayer.obj.duration());
                                    if (newVideoPlayer.dwell%5 != 0) { newVideoPlayer.dwell=(Math.round(newVideoPlayer.dwell/5)*5) }
                                    newVideoPlayer.dwell=lengthOfVideo; // for the end of the video
				    library.track('OTHER','Video_WatchTimer_'+newVideoPlayer.filename+'_'+newVideoPlayer.dwell+'_of_total_of_'+lengthOfVideo+'_seconds');
				    clearInterval(newVideoPlayer.dwell_timer);
				    newVideoPlayer.dwell = 0;
				    // End of Dwell Time -----------------------------------------------------


				    //this.volume(0);

				    // --- callback ----------------------------------
				    if (typeof newVideoPlayer.endedCallback == 'function') { newVideoPlayer.endedCallback && newVideoPlayer.endedCallback(); }

			    });
			    // ---------------------------------------------------------------------------------------------

			    this.on("error", function(event) {

				    var error_code = event.target.error ? event.target.error.code : event.code;
				    error_text = '';
				    if (typeof error_code != 'undefined') {
					    switch(error_code) {
					      // MEDIA_ERR_ABORTED
					      case 1: error_text = error_code+": The video download was cancelled"; break;
					      // MEDIA_ERR_NETWORK
					      case 2: error_text = error_code+": The video connection was lost, please confirm you're connected to the internet"; break;
					      // MEDIA_ERR_DECODE
					      case 3: error_text = error_code+": The video is bad or in a format that can't be played on your browser"; break;
					      // MEDIA_ERR_SRC_NOT_SUPPORTED
					      case 4: error_text = error_code+": This video is either unavailable or not supported in this browser"; break;
					      // MEDIA_ERR_ENCRYPTED (Chrome)
					      case 5: error_text = error_code+": The video you're trying to watch is encrypted and we don't know how to decrypt it"; break;
					    }
				    }

				    if (newVideoPlayer.tracking == true) { library.track('ERROR', newVideoPlayer.filename+' - '+error_text); }

				    // --- callback ----------------------------------
				    if (typeof newVideoPlayer.errorCallback == 'function') { newVideoPlayer.errorCallback && newVideoPlayer.errorCallback(); }

			    });



			}); // -- End of Initialization -------------------------------------------
			newVideoPlayer.obj = curVideoPlayer;


		    this.videoplayers.push(newVideoPlayer);

       } // end of check for existance of the new video player -------------


   },

   startVideo: function(_videoplayerName, _videoSrc) {

	var curVideoPlayer = this.findVideoplayer(_videoplayerName);

        curVideoPlayer.videostart_tracked = false; // clear the flag so that the start can be tracked if tracking is enabled
        curVideoPlayer.obj.src([
                            { type: _videoSrc.type, src: _videoSrc.src }
                            ]);
        curVideoPlayer.obj.play();
        curVideoPlayer.percentage = 0;
   },

   loadVideo: function(_videoplayerName, _videoSrc) {

	var curVideoPlayer = this.findVideoplayer(_videoplayerName);

	curVideoPlayer.videostart_tracked = false; // clear the flag so that the start can be tracked if tracking is enabled
	curVideoPlayer.obj.src([
			    { type: _videoSrc.type, src: _videoSrc.src }
			    ]);
	curVideoPlayer.percentage = 0;
   },


   stopVideo: function(_videoplayerName) {

	var curVideoPlayer = this.findVideoplayer(_videoplayerName);

	// track the percentages ---------------------
	if (curVideoPlayer.tracking == true) {
	    switch(curVideoPlayer.percentage) {
		    case 25: this.videoPercentage25(curVideoPlayer.filename); break;
		    case 50: this.videoPercentage50(curVideoPlayer.filename); break;
		    case 75: this.videoPercentage75(curVideoPlayer.filename); break;
	    }

	    // Track Dwell Time ------------------------------------------------------
	    var lengthOfVideo = parseInt(curVideoPlayer.obj.duration());
            if (curVideoPlayer.dwell%5 != 0) { curVideoPlayer.dwell=(Math.round(curVideoPlayer.dwell/5)*5) }
            if (curVideoPlayer.dwell>0) {
	    	this.track('OTHER','Video_WatchTimer_'+curVideoPlayer.filename+'_'+curVideoPlayer.dwell+'_of_total_of_'+lengthOfVideo+'_seconds');
	    }
	    clearInterval(curVideoPlayer.dwell_timer);
	    curVideoPlayer.dwell = 0;
	    // End of Dwell Time -----------------------------------------------------

	}

	curVideoPlayer.obj.currentTime(0);
	curVideoPlayer.obj.pause();
	curVideoPlayer.percentage = 0;
	curVideoPlayer.dwell = 0;
	curVideoPlayer.videostart_tracked = false;
	// -------------------------------------------
   },

   stopAllVideos: function() {
	for(var vi = 0; vi < this.videoplayers.length; vi++) {
	    var curVideoPlayerName = this.videoplayers[vi].name;
	    this.stopVideo(curVideoPlayerName);
	}
   },

   pauseVideo: function(_videoplayerName) {
	var curVideoPlayer = this.findVideoplayer(_videoplayerName);
	curVideoPlayer.obj.pause();
   },

   playVideo: function(_videoplayerName) {
	var curVideoPlayer = this.findVideoplayer(_videoplayerName);
	curVideoPlayer.obj.play();
	curVideoPlayer.percentage = 0;
   },

   pauseAllVideos: function() {
	for(var vi = 0; vi < this.videoplayers.length; vi++) {
	    this.videoplayers[vi].obj.pause();
	}
   },



   findVideoplayer: function(_videoplayerName) {
	var selectedVideoPlayer;
	for(var vi = 0; vi < this.videoplayers.length; vi++) { if (this.videoplayers[vi].name == _videoplayerName) { selectedVideoPlayer = this.videoplayers[vi];  } }
	return selectedVideoPlayer;
   },
   // --- End of Videoplayers ----------------------










   // --- Expandable -----------------------------
   registerExpandable: function(_settings) {

       // check for settings
       if (typeof _settings.unexpanded_domId != 'string') {throw('AFP.registerExpandable: unexpanded parameter is required');}
       if (typeof _settings.expanded_wrapper_domId != 'string') {throw('AFP.registerExpandable: expanded_wrapper_domId parameter is required');}
       if (typeof _settings.expanded_wrapper_closed_class != 'string') {throw('AFP.registerExpandable: expanded_wrapper_closed_class parameter is required');}
       if (typeof _settings.expanded_wrapper_expanded_class != 'string') {throw('AFP.registerExpandable: expanded_wrapper_expanded_class parameter is required');}
       if (typeof _settings.expanded_domId != 'string') {throw('AFP.registerExpandable: expanded_domId parameter is required');}
       if (typeof _settings.expanded_closed_class != 'string') {throw('AFP.registerExpandable: expanded_closed_class parameter is required');}
       if (typeof _settings.expanded_expanded_class != 'string') {throw('AFP.registerExpandable: expanded_expanded_class parameter is required');}
       if (typeof _settings.expanded_panelName != 'string') {throw('AFP.registerExpandable: expanded_panelName parameter is required');}
       if (typeof _settings.closebtn_domId != 'string') {throw('AFP.registerExpandable: closebtn_domId parameter is required');}
       if (typeof _settings.tracking != 'boolean') {throw('AFP.registerExpandable: tracking parameter (boolean) is required');}
       if (typeof _settings.autoexpand != 'boolean') {throw('AFP.registerExpandable: autoexpand parameter (boolean) is required');}
       if ((typeof _settings.expandfunction != 'function') && (typeof _settings.expandfunction != 'undefined')) {throw('AFP.registerExpandable: expandfunction parameter (function) is in wrong type');}
       if ((typeof _settings.closefunction != 'function') && (typeof _settings.closefunction != 'undefined')) {throw('AFP.registerExpandable: closefunction parameter (function) is in wrong type');}



       // saving the settings globally --------------------------------------------------
       this.expandableSettings.unexpanded_domId = _settings.unexpanded_domId;
       this.expandableSettings.expanded_wrapper_domId = _settings.expanded_wrapper_domId;
       this.expandableSettings.expanded_wrapper_closed_class = _settings.expanded_wrapper_closed_class;
       this.expandableSettings.expanded_wrapper_expanded_class = _settings.expanded_wrapper_expanded_class;
       this.expandableSettings.expanded_domId = _settings.expanded_domId;
       this.expandableSettings.expanded_closed_class = _settings.expanded_closed_class;
       this.expandableSettings.expanded_expanded_class = _settings.expanded_expanded_class;
       this.expandableSettings.expanded_panelName = _settings.expanded_panelName;
       this.expandableSettings.expanded_preloadList = _settings.expanded_preloadList;
       this.expandableSettings.closebtn_domId = _settings.closebtn_domId;
       this.expandableSettings.tracking = _settings.tracking;
       this.expandableSettings.autoexpand = _settings.autoexpand;
       if (typeof _settings.expandfunction == 'function') {
	   this.expandableSettings.expandfunction = _settings.expandfunction;
       }
       if (typeof _settings.closefunction == 'function') {
	   this.expandableSettings.closefunction = _settings.closefunction;
       }
       // -------------------------------------------------------------------------------

       var library = this;

	// Unexpanded handlers -----------------------------------------
	this.on(this.expandableSettings.unexpanded_domId, 'click', function() {

	   // expand the expandable
	   library.expandExpandable();

	})
       // --------------------------------------------------------------

       // Expanded handlers --------------------------------------------
       this.on(this.expandableSettings.closebtn_domId, 'click', function() {

	   // close the expandable
	   library.closeExpandable();

	})
       // --------------------------------------------------------------


       // Autoexpand ---------------------------------------------------
       if (this.expandableSettings.autoexpand==true) {
	   // expand the expandable
	   setTimeout(function() {library.expandExpandable();},100);
       }
       // --------------------------------------------------------------


   },

    // --- updateExpandable -----------------------------
   updateExpandable: function(_settings) {

       // check for settings
       if (typeof _settings.unexpanded_domId == 'string') {this.expandableSettings.unexpanded_domId = _settings.unexpanded_domId;}
       if (typeof _settings.expanded_wrapper_domId == 'string') {this.expandableSettings.expanded_wrapper_domId = _settings.expanded_wrapper_domId;}
       if (typeof _settings.expanded_wrapper_closed_class == 'string') {this.expandableSettings.expanded_wrapper_closed_class = _settings.expanded_wrapper_closed_class;}
       if (typeof _settings.expanded_wrapper_expanded_class == 'string') {this.expandableSettings.expanded_wrapper_expanded_class = _settings.expanded_wrapper_expanded_class;}
       if (typeof _settings.expanded_domId == 'string') {this.expandableSettings.expanded_domId = _settings.expanded_domId;}
       if (typeof _settings.expanded_closed_class == 'string') {this.expandableSettings.expanded_closed_class = _settings.expanded_closed_class;}
       if (typeof _settings.expanded_expanded_class == 'string') {this.expandableSettings.expanded_expanded_class = _settings.expanded_expanded_class;}
       if (typeof _settings.expanded_panelName == 'string') {this.expandableSettings.expanded_panelName = _settings.expanded_panelName;}
       if (typeof _settings.expanded_preloadList == 'string') {this.expandableSettings.expanded_preloadList = _settings.expanded_preloadList;}
       if (typeof _settings.closebtn_domId == 'string') {this.expandableSettings.closebtn_domId = _settings.closebtn_domId;}
       if (typeof _settings.tracking == 'boolean') {this.expandableSettings.tracking = _settings.tracking;}
       if (typeof _settings.autoexpand == 'boolean') {this.expandableSettings.autoexpand = _settings.autoexpand;}
       if (typeof _settings.expandfunction == 'boolean') {this.expandableSettings.expandfunction = _settings.expandfunction;}
       if (typeof _settings.closefunction == 'boolean') {this.expandableSettings.closefunction = _settings.closefunction;}

   },



   expandExpandable: function() {
	this.log('expandExpandable');

	var _library = this;
	// preload if given ----------------------------------------------------
	if (typeof this.expandableSettings.expanded_preloadList != 'undefined') {

	    this.preload(this.expandableSettings.expanded_preloadList, function() {

		_library.actualExpandExpandable();

	    });


	} else {
	    // NO PRELOADING - direct
	    this.actualExpandExpandable();
	}
	// -- end of preloading if ------------------------------------------------


   },

   actualExpandExpandable: function() {

	this.cached_el(this.expandableSettings.expanded_wrapper_domId).className = this.expandableSettings.expanded_wrapper_expanded_class;
	this.cached_el(this.expandableSettings.expanded_domId).className = this.expandableSettings.expanded_expanded_class;

	// Tracking --------------------------------------------
	if (this.expandableSettings.tracking == true) {
	    this.track('EXPAND_PANEL', this.expandableSettings.expanded_panelName);
	}
	// end of Tracking -------------------------------------

       // mraid ------------------------------------------------
       if (this.settings.mraidCompatible == true) {
	   this.mraid_expand();
       }
       // end of mraid -----------------------------------------

       // User defined expand function -------------------
       if (typeof this.expandableSettings.expandfunction == 'function') {
	    this.expandableSettings.expandfunction(this);
       }
       // -- User defined expand function ----------------
   },

   closeExpandable: function() {

	this.cached_el(this.expandableSettings.expanded_wrapper_domId).className = this.expandableSettings.expanded_wrapper_closed_class;
	this.cached_el(this.expandableSettings.expanded_domId).className = this.expandableSettings.expanded_closed_class;

	// Tracking --------------------------------------------
	if (this.expandableSettings.tracking == true) {
	    this.track('CLOSE_PANEL', this.expandableSettings.expanded_panelName);
	}
	// end of Tracking -------------------------------------

       // mraid ------------------------------------------------
       if (this.settings.mraidCompatible == true) {
	   this.mraid_close();
       }
       // end of mraid -----------------------------------------

       // videos ------------------------------------------------
	this.stopAllVideos();
       // end of videos -----------------------------------------
       //
       // User defined close function -------------------
       if (typeof this.expandableSettings.closefunction == 'function') {
	    this.expandableSettings.closefunction(this);
       }
       // -- User defined expand function ----------------
   },





























   // MRAID -------------------------------------------------------------------------------------------


    // the MRAID ready function ---------------------
    mraid_Ready: function() {
	this.log('mraid_Ready');

	mraid.afp = this;

	mraid.useCustomClose(true); // the default option
	mraid.addEventListener( 'error', this.mraid_HandleErrorEvent);
	if (typeof mraid.afp.settings.mraidStateChange == 'function') {
	    mraid.addEventListener( 'stateChange', this.settings.mraidStateChange);
	}
	mraid.addEventListener( 'orientationChange', this.mraid_HandleOrientationChangeEvent );


	// if isViewable -----------------
	if (mraid.isViewable()) {
	    // start the ad
	    // User Start function
	    this.log('MRAID > mraid.isViewable = true');
	    if (typeof this.settings.start == 'function') {
		 this.settings.start(this) && this.settings.start(this);
	    }

	 } else {

	    this.log('MRAID > mraid.isViewable = false');
	    mraid.addEventListener('viewableChange', function(viewable) {

		//console.log('MRAID > mraid.viewableChange()');

		if (viewable) {
		    mraid.removeEventListener('viewableChange', arguments.callee);

		    //console.log('MRAID > mraid.viewableChange() > viewable == true');

		    // User Start function
		    if (typeof mraid.afp.settings.start == 'function') {
			 mraid.afp.settings.start(mraid.afp) && mraid.afp.settings.start(mraid.afp);
		    }

		}
	    });
	}
	// --------------------------------

    },

    mraid_HandleErrorEvent: function( message, action ) {
	mraid.afp.log('mraid_HandleErrorEvent()');

	var msg = "MRAID ERROR ";
	if ( action != null ) {
	    // error caused by an action
	    msg += "caused by action '" + action + "', ";
	}
	msg += "Message: " + message;

	mraid.afp.log(msg);

    },


    mraid_HandleOrientationChangeEvent: function( val ) {

	//alert('mraid_HandleOrientationChangeEvent = '+val);

    },


    mraid_expand: function() {
	if (typeof (mraid) !== 'undefined') {
	mraid.expand();
	}
    },
    mraid_close: function() {
	if (typeof (mraid) !== 'undefined') {
	mraid.close();
	}
    },
    mraid_isViewable: function() {
	if (typeof (mraid) !== 'undefined') {
	return mraid.isViewable();
	}
    },
    mraid_getVersion: function() {
	if (typeof (mraid) !== 'undefined') {
	return mraid.getVersion();
	}
    },
    mraid_getState: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getState();
	}
    },
    mraid_getResizeProperties: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getResizeProperties();
	}
    },
    mraid_getExpandProperties: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getExpandProperties();
	}
    },
    mraid_setExpandProperties: function(_expandPropertiesObject) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.setExpandProperties(_expandPropertiesObject);
	}
    },
    mraid_setCustomClose: function(_useCustomClose) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.useCustomClose(_useCustomClose);
	    mraid.setExpandProperties({useCustomClose:_useCustomClose});
	}
    },
    mraid_getOrientationProperties: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getOrientationProperties();
	}
    },
    mraid_getScreenSize: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getScreenSize();
	}
    },
    mraid_getMaxSize: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getMaxSize();
	}
    },
    mraid_getDefaultPosition: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getDefaultPosition();
	}
    },
    mraid_getCurrentPosition: function() {
	if (typeof (mraid) !== 'undefined') {
	    return mraid.getCurrentPosition();
	}
    },
    mraid_open: function(_url) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.open(_url);
	}
    },
    mraid_playVideo: function(_url) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.playVideo(_url);
	}
    },
    mraid_storePicture: function(_url) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.storePicture (_url);
	}
    },
    mraid_createCalendarEvent: function(_description, _location, _summary, _start, _end, _reminder) {
	if (typeof (mraid) !== 'undefined') {
	    mraid.createCalendarEvent (
	    {description:_description, // event description
		location:_location, // event location
		summary:_summary, // event summary
		start:_start, // 2011-03-24T09:00-08:00
		end:_end, // 2011-03-24T10:00:00-08:00
		reminder: _reminder // -3600000
	    });
	}
    },
    mraid_isSupported: function(_feature) {
	 return mraid.supports(_feature);
    },
    mraid_getAllSupported: function() {
	if (typeof (mraid) !== 'undefined') {
	    var mSupported = {
		   'sms' : false,
		   'tel' : false,
		   'calendar' : false,
		   'storePicture' : false,
		   'inlineVideo' : false
	   };

	   for (var feature in mSupported) {
		   mSupported[feature] = mraid.supports(feature);
	   }

	   return mSupported;
	}
    },
   // End of MRAID -------------------------------------------------------------------------------------------






   // --- LoadJS ----------------------------------
    loadJS: function (src, callback) {

	var s = document.createElement('script');
	s.type = 'text/javascript';
	s.src = src;
	s.async = true;
	s.onreadystatechange = s.onload = function() {
		var state = s.readyState;
		if (!callback.done && (!state || /loaded|complete/.test(state))) {
			callback.done = true;
			callback();
		}
	};
	var oHead = document.getElementsByTagName('HEAD').item(0);
	oHead.appendChild(s);

    },

   // -- end of LoadJS ----------------------------







   init: function() {
       this.log('INIT');

       var library = this;


       var curInitTime = new Date();
       var initTime = curInitTime.getTime();

       // cache all elements ------------------------------
       if (typeof this.settings.domPrefix != 'undefined') {
	this.cacheAllElements(this.settings.domPrefix);
       }
       // -------------------------------------------------


         // -- ORIENTATION ----------------------------------------------------------
       if (this.settings.captureOrientation == true) {

	   window.addEventListener('orientationchange', function() {

		if (typeof window.orientation == 'undefined') {
		    library.deviceOrientation = 'none';
		} else {
		    switch(window.orientation) {
		      case -90:
		      case 90:
			library.deviceOrientation = 'landscape';
			break;
		      default:
			library.deviceOrientation = 'portrait';
			break;
		    }
		}

		// User Start function
		if (typeof library.settings.orientationchange == 'function') {
		     library.settings.orientationchange(library);
		}

	   });


	   // initial set of device orientation --------------------------------
	    if (typeof window.orientation == 'undefined') {
		 library.deviceOrientation = 'none';
	    } else {
	     switch(window.orientation) {
	       case -90:
	       case 90:
		 library.deviceOrientation = 'landscape';
		 break;
	       default:
		 library.deviceOrientation = 'portrait';
		 break;
	     }
	    }
	// end of Initial ----------------------------------------------------

	}
       // -- END OF ORIENTATION ---------------------------------------------------



	// MRAID ---------------------------------------------------
	if (this.settings.mraidCompatible == true) {

	    var readyTimeout;
	    function readyListener() {

		    // getting the current time
		    var curExecTime = new Date();
		    var curExecTime = curExecTime.getTime();
		    var initTimeDifference = curExecTime - initTime;

		    // if the difference is greater than the waiting time then execute the normal start
		    if (initTimeDifference > library.settings.mraidInitWaiting) {

			library.log ('NO MRAID is presented. Gracefully downgrade to normal ad');

			clearTimeout(readyTimeout);

			library.settings.mraidCompatible = false; // remove the mraidCompatible flag - no mraid is presented

			if (typeof library.settings.start == 'function') {
			    library.settings.start(library);
		        }

		    } else {


			if (typeof (mraid) === 'undefined') {
				library.log('MRAID not found yet -> initTimeDifference = '+initTimeDifference);
				readyTimeout = setTimeout(readyListener, 200);
			} else {
				//alert('mraid.detectionTime = '+initTimeDifference+' ms');
				var state = mraid.getState();
				if (state === 'default') {
					library.log ('MRAID state is already default before could register listener for ready');
                    clearTimeout(readyTimeout);
					library.mraid_Ready();
				} else {
					library.log ('state is ' + state + '; register ready listener');
					clearTimeout(readyTimeout);
					mraid.addEventListener('ready', library.mraid_Ready);
				}
			}

		    } // for if of curExecTime - initTime


	    }
	    readyListener();

	} else {
	    // No MRAID - start the start manually

	    // User Start function
	    if (typeof this.settings.start == 'function') {
		 this.settings.start(library);
	    }

	}

	// -- END OF MRAID --------------------------------------------------------







   }



};
